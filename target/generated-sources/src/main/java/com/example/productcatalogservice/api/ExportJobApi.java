/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.productcatalogservice.api;

import com.example.productcatalogservice.models.Error;
import com.example.productcatalogservice.models.ExportJob;
import com.example.productcatalogservice.models.ExportJobCreate;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-02-16T03:04:00.216089+07:00[Asia/Ho_Chi_Minh]")
@Validated
@Api(value = "exportJob", description = "the exportJob API")
public interface ExportJobApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /exportJob : Creates a ExportJob
     * This operation creates a ExportJob entity.
     *
     * @param exportJob The ExportJob to be created (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Creates a ExportJob", nickname = "createExportJob", notes = "This operation creates a ExportJob entity.", response = ExportJob.class, tags={ "exportJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ExportJob.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exportJob",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<ExportJob> createExportJob(@ApiParam(value = "The ExportJob to be created", required = true) @Valid @RequestBody ExportJobCreate exportJob) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"@type\" : \"@type\", \"query\" : \"query\", \"errorLog\" : \"errorLog\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"url\" : \"https://openapi-generator.tech\", \"path\" : \"path\", \"@baseType\" : \"@baseType\", \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"href\" : \"https://openapi-generator.tech\", \"@schemaLocation\" : \"https://openapi-generator.tech\", \"contentType\" : \"contentType\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /exportJob/{id} : Deletes a ExportJob
     * This operation deletes a ExportJob entity.
     *
     * @param id Identifier of the ExportJob (required)
     * @return Deleted (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Deletes a ExportJob", nickname = "deleteExportJob", notes = "This operation deletes a ExportJob entity.", tags={ "exportJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/exportJob/{id}",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<Void> deleteExportJob(@ApiParam(value = "Identifier of the ExportJob", required = true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /exportJob : List or find ExportJob objects
     * This operation list or find ExportJob entities
     *
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "List or find ExportJob objects", nickname = "listExportJob", notes = "This operation list or find ExportJob entities", response = ExportJob.class, responseContainer = "List", tags={ "exportJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ExportJob.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exportJob",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<List<ExportJob>> listExportJob(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"@type\" : \"@type\", \"query\" : \"query\", \"errorLog\" : \"errorLog\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"url\" : \"https://openapi-generator.tech\", \"path\" : \"path\", \"@baseType\" : \"@baseType\", \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"href\" : \"https://openapi-generator.tech\", \"@schemaLocation\" : \"https://openapi-generator.tech\", \"contentType\" : \"contentType\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /exportJob/{id} : Retrieves a ExportJob by ID
     * This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.
     *
     * @param id Identifier of the ExportJob (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Retrieves a ExportJob by ID", nickname = "retrieveExportJob", notes = "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.", response = ExportJob.class, tags={ "exportJob", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ExportJob.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exportJob/{id}",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<ExportJob> retrieveExportJob(@ApiParam(value = "Identifier of the ExportJob", required = true) @PathVariable("id") String id,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=utf-8"))) {
                    String exampleString = "{ \"@type\" : \"@type\", \"query\" : \"query\", \"errorLog\" : \"errorLog\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"url\" : \"https://openapi-generator.tech\", \"path\" : \"path\", \"@baseType\" : \"@baseType\", \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"href\" : \"https://openapi-generator.tech\", \"@schemaLocation\" : \"https://openapi-generator.tech\", \"contentType\" : \"contentType\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
