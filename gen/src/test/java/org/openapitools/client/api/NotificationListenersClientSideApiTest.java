/*
 * Product Catalog Management
 * ## TMF API Reference: TMF620 - Product Catalog Management  ### Release : 20.5 - March 2021  Product Catalog API is one of Catalog Management API Family. Product Catalog API goal is to provide a catalog of products.   ### Operations Product Catalog API performs the following operations on the resources : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity - Manage notification of events
 *
 * The version of the OpenAPI document: 4.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CatalogAttributeValueChangeEvent;
import org.openapitools.client.model.CatalogBatchEvent;
import org.openapitools.client.model.CatalogCreateEvent;
import org.openapitools.client.model.CatalogDeleteEvent;
import org.openapitools.client.model.CatalogStateChangeEvent;
import org.openapitools.client.model.CategoryAttributeValueChangeEvent;
import org.openapitools.client.model.CategoryCreateEvent;
import org.openapitools.client.model.CategoryDeleteEvent;
import org.openapitools.client.model.CategoryStateChangeEvent;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.ProductOfferingAttributeValueChangeEvent;
import org.openapitools.client.model.ProductOfferingCreateEvent;
import org.openapitools.client.model.ProductOfferingDeleteEvent;
import org.openapitools.client.model.ProductOfferingPriceAttributeValueChangeEvent;
import org.openapitools.client.model.ProductOfferingPriceCreateEvent;
import org.openapitools.client.model.ProductOfferingPriceDeleteEvent;
import org.openapitools.client.model.ProductOfferingPriceStateChangeEvent;
import org.openapitools.client.model.ProductOfferingStateChangeEvent;
import org.openapitools.client.model.ProductSpecificationAttributeValueChangeEvent;
import org.openapitools.client.model.ProductSpecificationCreateEvent;
import org.openapitools.client.model.ProductSpecificationDeleteEvent;
import org.openapitools.client.model.ProductSpecificationStateChangeEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationListenersClientSideApi
 */
@Ignore
public class NotificationListenersClientSideApiTest {

    private final NotificationListenersClientSideApi api = new NotificationListenersClientSideApi();

    
    /**
     * Client listener for entity CatalogAttributeValueChangeEvent
     *
     * Example of a client listener for receiving the notification CatalogAttributeValueChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCatalogAttributeValueChangeEventTest() throws ApiException {
        CatalogAttributeValueChangeEvent data = null;
        EventSubscription response = api.listenToCatalogAttributeValueChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CatalogBatchEvent
     *
     * Example of a client listener for receiving the notification CatalogBatchEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCatalogBatchEventTest() throws ApiException {
        CatalogBatchEvent data = null;
        EventSubscription response = api.listenToCatalogBatchEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CatalogCreateEvent
     *
     * Example of a client listener for receiving the notification CatalogCreateEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCatalogCreateEventTest() throws ApiException {
        CatalogCreateEvent data = null;
        EventSubscription response = api.listenToCatalogCreateEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CatalogDeleteEvent
     *
     * Example of a client listener for receiving the notification CatalogDeleteEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCatalogDeleteEventTest() throws ApiException {
        CatalogDeleteEvent data = null;
        EventSubscription response = api.listenToCatalogDeleteEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CatalogStateChangeEvent
     *
     * Example of a client listener for receiving the notification CatalogStateChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCatalogStateChangeEventTest() throws ApiException {
        CatalogStateChangeEvent data = null;
        EventSubscription response = api.listenToCatalogStateChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CategoryAttributeValueChangeEvent
     *
     * Example of a client listener for receiving the notification CategoryAttributeValueChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCategoryAttributeValueChangeEventTest() throws ApiException {
        CategoryAttributeValueChangeEvent data = null;
        EventSubscription response = api.listenToCategoryAttributeValueChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CategoryCreateEvent
     *
     * Example of a client listener for receiving the notification CategoryCreateEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCategoryCreateEventTest() throws ApiException {
        CategoryCreateEvent data = null;
        EventSubscription response = api.listenToCategoryCreateEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CategoryDeleteEvent
     *
     * Example of a client listener for receiving the notification CategoryDeleteEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCategoryDeleteEventTest() throws ApiException {
        CategoryDeleteEvent data = null;
        EventSubscription response = api.listenToCategoryDeleteEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity CategoryStateChangeEvent
     *
     * Example of a client listener for receiving the notification CategoryStateChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToCategoryStateChangeEventTest() throws ApiException {
        CategoryStateChangeEvent data = null;
        EventSubscription response = api.listenToCategoryStateChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingAttributeValueChangeEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingAttributeValueChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingAttributeValueChangeEventTest() throws ApiException {
        ProductOfferingAttributeValueChangeEvent data = null;
        EventSubscription response = api.listenToProductOfferingAttributeValueChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingCreateEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingCreateEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingCreateEventTest() throws ApiException {
        ProductOfferingCreateEvent data = null;
        EventSubscription response = api.listenToProductOfferingCreateEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingDeleteEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingDeleteEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingDeleteEventTest() throws ApiException {
        ProductOfferingDeleteEvent data = null;
        EventSubscription response = api.listenToProductOfferingDeleteEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingPriceAttributeValueChangeEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingPriceAttributeValueChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingPriceAttributeValueChangeEventTest() throws ApiException {
        ProductOfferingPriceAttributeValueChangeEvent data = null;
        EventSubscription response = api.listenToProductOfferingPriceAttributeValueChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingPriceCreateEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingPriceCreateEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingPriceCreateEventTest() throws ApiException {
        ProductOfferingPriceCreateEvent data = null;
        EventSubscription response = api.listenToProductOfferingPriceCreateEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingPriceDeleteEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingPriceDeleteEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingPriceDeleteEventTest() throws ApiException {
        ProductOfferingPriceDeleteEvent data = null;
        EventSubscription response = api.listenToProductOfferingPriceDeleteEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingPriceStateChangeEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingPriceStateChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingPriceStateChangeEventTest() throws ApiException {
        ProductOfferingPriceStateChangeEvent data = null;
        EventSubscription response = api.listenToProductOfferingPriceStateChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductOfferingStateChangeEvent
     *
     * Example of a client listener for receiving the notification ProductOfferingStateChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductOfferingStateChangeEventTest() throws ApiException {
        ProductOfferingStateChangeEvent data = null;
        EventSubscription response = api.listenToProductOfferingStateChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductSpecificationAttributeValueChangeEvent
     *
     * Example of a client listener for receiving the notification ProductSpecificationAttributeValueChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductSpecificationAttributeValueChangeEventTest() throws ApiException {
        ProductSpecificationAttributeValueChangeEvent data = null;
        EventSubscription response = api.listenToProductSpecificationAttributeValueChangeEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductSpecificationCreateEvent
     *
     * Example of a client listener for receiving the notification ProductSpecificationCreateEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductSpecificationCreateEventTest() throws ApiException {
        ProductSpecificationCreateEvent data = null;
        EventSubscription response = api.listenToProductSpecificationCreateEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductSpecificationDeleteEvent
     *
     * Example of a client listener for receiving the notification ProductSpecificationDeleteEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductSpecificationDeleteEventTest() throws ApiException {
        ProductSpecificationDeleteEvent data = null;
        EventSubscription response = api.listenToProductSpecificationDeleteEvent(data);

        // TODO: test validations
    }
    
    /**
     * Client listener for entity ProductSpecificationStateChangeEvent
     *
     * Example of a client listener for receiving the notification ProductSpecificationStateChangeEvent
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listenToProductSpecificationStateChangeEventTest() throws ApiException {
        ProductSpecificationStateChangeEvent data = null;
        EventSubscription response = api.listenToProductSpecificationStateChangeEvent(data);

        // TODO: test validations
    }
    
}
